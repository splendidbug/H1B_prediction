# -*- coding: utf-8 -*-
"""h1b_pred.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CAj100pEJvGPkAenEOR6OiZVo-pWQ58A
"""
import sys
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split 
from sklearn import metrics
import pickle
from sklearn.ensemble import RandomForestClassifier
import warnings
warnings.filterwarnings("ignore")
all_cols = ['FULL_TIME_POSITION',	'EMPLOYER_NAME_DELOITTE',	'EMPLOYER_NAME_IBM',	'EMPLOYER_NAME_INFOSYS',	'EMPLOYER_NAME_OTHER',	'EMPLOYER_NAME_TATA',	'EMPLOYER_NAME_UNIVERSITY',	'EMPLOYER_NAME_WIPRO',	'SOC_NAME_OTHER',	'SOC_NAME_advance science',	'SOC_NAME_arch and eng',	'SOC_NAME_business',	'SOC_NAME_computer guy',	'SOC_NAME_financial',	'SOC_NAME_manager',	'SOC_NAME_marketing',	'SOC_NAME_math fellow',	'SOC_NAME_medical',	'SOC_NAME_teacher',	'PREVAILING_WAGE_LOW',	'PREVAILING_WAGE_MEDIUM',	'PREVAILING_WAGE_VERY LOW',	'WORKSITE_ALABAMA',	'WORKSITE_ALASKA',	'WORKSITE_ARIZONA',	'WORKSITE_ARKANSAS',	'WORKSITE_CALIFORNIA',	'WORKSITE_COLORADO',	'WORKSITE_CONNECTICUT',	'WORKSITE_DELAWARE',	'WORKSITE_DISTRICT OF COLUMBIA',	'WORKSITE_FLORIDA',	'WORKSITE_GEORGIA',	'WORKSITE_HAWAII',	'WORKSITE_IDAHO',	'WORKSITE_ILLINOIS',	'WORKSITE_INDIANA',	'WORKSITE_IOWA',	'WORKSITE_KANSAS',	'WORKSITE_KENTUCKY',	'WORKSITE_LOUISIANA',	'WORKSITE_MAINE',	'WORKSITE_MARYLAND',	'WORKSITE_MASSACHUSETTS',	'WORKSITE_MICHIGAN',	'WORKSITE_MINNESOTA',	'WORKSITE_MISSISSIPPI',	'WORKSITE_MISSOURI',	'WORKSITE_MONTANA',	'WORKSITE_NA',	'WORKSITE_NEBRASKA', 'WORKSITE_NEVADA',	'WORKSITE_NEW HAMPSHIRE',	'WORKSITE_NEW JERSEY',	'WORKSITE_NEW MEXICO',	'WORKSITE_NEW YORK',	'WORKSITE_NORTH CAROLINA',	'WORKSITE_NORTH DAKOTA',	'WORKSITE_OHIO',	'WORKSITE_OKLAHOMA',	'WORKSITE_OREGON',	'WORKSITE_PENNSYLVANIA',	'WORKSITE_PUERTO RICO',	'WORKSITE_RHODE ISLAND',	'WORKSITE_SOUTH CAROLINA',	'WORKSITE_SOUTH DAKOTA',	'WORKSITE_TENNESSEE',	'WORKSITE_TEXAS',	'WORKSITE_UTAH',	'WORKSITE_VERMONT',	'WORKSITE_VIRGINIA',	'WORKSITE_WASHINGTON',	'WORKSITE_WEST VIRGINIA',	'WORKSITE_WISCONSIN',	'WORKSITE_WYOMING']

df_pred = pd.DataFrame(columns=all_cols)
df_pred.loc[0]=0
df_pred

full_time = '%s' % (sys.argv[1])

emp_name =  '%s' % (sys.argv[3])
emp_name=emp_name.upper()

soc = '%s' % (sys.argv[4])
soc=soc.lower()

wage = '%s' % (sys.argv[5])
wage = int(wage)

state='%s' % (sys.argv[2])
state = state.upper()
state='WORKSITE_'+ state

if(full_time=='yes'):
    full_time=1
    
else:
    full_time=0


if('UNIVERSITY' in emp_name):
    emp_name='EMPLOYER_NAME_UNIVERSITY'
elif('INFOSYS' in emp_name):
    emp_name='EMPLOYER_NAME_INFOSYS'
elif('IBM' in emp_name):
    emp_name='EMPLOYER_NAME_IBM'
elif('TATA' in emp_name):
    emp_name='TATA'
elif('WIPRO' in emp_name):
    emp_name='EMPLOYER_NAME_WIPRO'
elif('DELOITTE' in emp_name):
    emp_name='EMPLOYER_NAME_DELOITTE'
else:
    emp_name='EMPLOYER_NAME_OTHER'

if('computer' in soc or 'programmer' in soc or 'software' in soc or 'web developer' in soc or 'database' in soc):
        soc = 'SOC_NAME_'+'computer guy'
elif ('math' in soc or 'statistic' in soc or 'predictive model' in soc or 'stats' in soc):
        soc = "SOC_NAME_"+"math fellow"
elif ('teacher' in soc or 'linguist' in soc or 'professor' in soc or 'teach' in soc or 'school principal' in soc or 'principal' in soc):
        soc = "SOC_NAME_"+"teacher"
elif ('medical' in soc or 'doctor' in soc or 'physician' in soc or 'dentist' in soc or 'health' in soc or 'physical therapists' in soc or 'surgeon' in soc or 'nurse' in soc or 'psychiatr' in soc):
        soc = "SOC_NAME_"+"medical"
elif ('physicist' in soc or 'chemist' in soc or 'biology' in soc or 'scientist' in soc or 'biologi' in soc or 'clinical research' in soc):
        soc = "SOC_NAME_"+"advance science"
elif ('public relation' in soc or 'manage' in soc or 'management' in soc or 'operation' in soc or 'chief' in soc or 'plan' in soc or 'executive' in soc):
        soc = "SOC_NAME_"+"manager"
elif ('advertis' in soc or 'marketing' in soc or 'promotion' in soc or 'market research' in soc):
        soc = "SOC_NAME_"+"marketing"
elif ('business' in soc or 'business analyst' in soc or 'business systems analyst' in soc):
        soc = "SOC_NAME_"+"business"
elif ('accountant' in soc or 'finance' in soc or 'financial' in soc):
        soc = "SOC_NAME_"+"financial"
elif ('engineer' in soc or 'architect' in soc or 'surveyor' in soc or 'carto' in soc or 'technician' in soc or 'drafter' in soc or 'information security' in soc or 'information tech' in soc):
        soc = "SOC_NAME_"+"arch and eng"
else:
        soc = "SOC_NAME_"+"OTHER"

if(wage <=50000):
        wage = 'PREVAILING_WAGE_VERY LOW'
elif (wage >50000 and wage <=70000):
        wage = "PREVAILING_WAGE_LOW"
elif (wage >70000 or wage <=90000):
        wage = "PREVAILING_WAGE_MEDIUM"
elif (wage >90000 or wage <=150000):
        wage = "PREVAILING_WAGE_HIGH"
elif (wage >=150000):
        wage = "PREVAILING_WAGE_VERY HIGH"

df_pred['FULL_TIME_POSITION'] = full_time

lst = [emp_name,soc, wage, state]
df_pred[lst]=1
loaded_model = pickle.load(open('rf1_model.sav', 'rb'))
y_pred_rf =  loaded_model.predict(df_pred)

output='noneeeeeeeeeeeee'
if(y_pred_rf[0]==1):
    output='ACCEPTED'
else:
    output='DENIED'

print(output)